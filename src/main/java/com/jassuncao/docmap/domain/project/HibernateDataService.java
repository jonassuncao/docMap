package com.jassuncao.docmap.domain.project;

import com.jassuncao.docmap.domain.attribute.Attribute;
import com.jassuncao.docmap.domain.entity.Entity;
import com.jassuncao.docmap.domain.relationship.Relationship;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * @author jonathas.assuncao - jaa020399@gmail.com
 * 15/09/2021
 */
@Component
public class HibernateDataService {

    private final HibernateRelationshipDataService hibernateRelationshipDataService;

    public HibernateDataService(HibernateRelationshipDataService hibernateRelationshipDataService) {
        this.hibernateRelationshipDataService = hibernateRelationshipDataService;
    }

    public Map<String, Object> getParams(Project project, Entity entity, List<Relationship> relationships, List<? extends Attribute> attributes) {
        final Map<String, Object> params = new HashMap<>();
        params.put("package", Normalize.importForm(project.getName(), entity.getAlias()));
        params.put("headers", header(project, entity));
        params.put("entity", Normalize.dataBaseForm(entity.getAlias()));
        params.put("className", Normalize.classForm(entity.getAlias()));
        params.put("attributes", attributes.stream().map(HibernateAttributeData::new).collect(Collectors.toList()));
        params.put("relationships", relationships.stream().map(buildRelationship(project)).collect(Collectors.toList()));
        return params;
    }

    private Function<Relationship, HibernateRelationshipData> buildRelationship(Project project) {
        return relationship -> hibernateRelationshipDataService.buildRelationship(project, relationship);
    }

    private List<String> header(Project project, Entity entity) {
        final String safeValue = new StringBuilder()
                .append(StringUtils.defaultIfEmpty(project.getDescription(), StringUtils.EMPTY))
                .append(StringUtils.LF)
                .append(StringUtils.defaultIfEmpty(entity.getDescription(), StringUtils.EMPTY))
                .toString();
        final List<String> description = Normalize.splitPreserveTokens(safeValue, 120);
        description.add(StringUtils.EMPTY);
        description.add("Generated by docMap");
        return description;
    }
}
