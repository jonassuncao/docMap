package com.jassuncao.docmap.domain.project;

import com.jassuncao.docmap.domain.attribute.Attribute;
import com.jassuncao.docmap.domain.entity.Entity;
import com.jassuncao.docmap.domain.relationship.Relationship;
import com.jassuncao.docmap.infra.CastUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * @author jonathas.assuncao - jaa020399@gmail.com
 * 15/09/2021
 */
@Component
public class HibernateDataService {

    private final HibernateRelationshipDataService hibernateRelationshipDataService;

    public HibernateDataService(HibernateRelationshipDataService hibernateRelationshipDataService) {
        this.hibernateRelationshipDataService = hibernateRelationshipDataService;
    }

    public Map<String, Object> getParams(Project project, Entity entity, List<Relationship> relationships, List<? extends Attribute> attributes) {
        final Map<String, Object> params = new HashMap<>();
        params.put("package", Normalize.importForm(project.getName(), entity.getAlias()));
        params.put("headers", header(project, entity));
        params.put("entity", Normalize.dataBaseForm(entity.getAlias()));
        params.put("className", Normalize.classForm(entity.getAlias()));
        params.put("attributes", attributes.stream().map(HibernateAttributeData::new).collect(Collectors.toList()));
        params.put("relationships", relationships.stream().map(buildRelationship(project)).collect(Collectors.toList()));
        params.put("uniques", uniqueResolver(params));
        return params;
    }

    private Map<String, String> uniqueResolver(Map<String, Object> params) {
        return Stream.of(params.get("attributes"),params.get("relationships"))
                .map(items -> (List<HibernateAttributeGenericData>) items)
                .flatMap(List::stream)
                .filter(HibernateAttributeGenericData::isUnique)
                .map(HibernateAttributeGenericData::getName)
                .map(Normalize::dataBaseForm)
                .collect(Collectors.toMap(uniqueConstraintName(params), String::valueOf));
    }

    private Function<String, String> uniqueConstraintName(Map<String, Object> params) {
        final Optional<String> entityName = CastUtils.ifCast(params.get("entity"), String.class);
        return attributeName -> entityName.map(entity -> String.format("%s_%s_un", entity, attributeName))
                .orElseGet(() -> String.format("%s_un", attributeName));
    }

    private Function<Relationship, HibernateRelationshipData> buildRelationship(Project project) {
        return relationship -> hibernateRelationshipDataService.buildRelationship(project, relationship);
    }

    private List<String> header(Project project, Entity entity) {
        final String safeValue = new StringBuilder()
                .append(StringUtils.defaultIfEmpty(project.getDescription(), StringUtils.EMPTY))
                .append(StringUtils.LF)
                .append(StringUtils.defaultIfEmpty(entity.getDescription(), StringUtils.EMPTY))
                .toString();
        final List<String> description = Normalize.splitPreserveTokens(safeValue, 120);
        description.add(StringUtils.EMPTY);
        description.add("Generated by docMap");
        return description;
    }
}
